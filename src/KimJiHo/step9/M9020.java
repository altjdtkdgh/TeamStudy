package KimJiHo.step9;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class M9020 {

//	문제
//	1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다.
//	예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다.
//	하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.
//
//	골드바흐의 추측은 유명한 정수론의 미해결 문제로,
//	2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 
//	이러한 수를 골드바흐 수라고 한다. 
//	또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다.
//	예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 
//	14 = 3 + 11, 14 = 7 + 7이다. 
//	10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.
//
//	2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오.
//	만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.
// 
//	입력
//	첫째 줄에 테스트 케이스의 개수 T가 주어진다. 
//	각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다. (4 ≤ n ≤ 10,000)
//
//	출력
//	각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다.
//	출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.
/*
 * 메모리 : 15716kb
 * 시간 : 1372ms
 * 
 * */
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int t = Integer.parseInt(br.readLine());
		
		for(int i = 0 ; i < t ; i ++) {
			int even = Integer.parseInt(br.readLine()); 
			
			System.out.println(solution(even));
		}
	}
	
	static String solution(int n) {
		String result = null;
		
		for(int i = n/2 ; i >= 1 ; i--) { //해당 숫자의 절반부터 내려가면서 검사..
			if(isPrimeNum(i)) {//(절번에 가까울수록 두 수 간의 차이가 작은 소수이기 때문에.. 찾으면 더이상 검사 안하고 skip)
				int num1 = i;
				int num2 = n - num1; // 더해서 자기자신이 될 수 있는 수.. 이 수가 소수인지 판별하면 됨
			
				if(isPrimeNum(num2)) {
					result = num1 + " " + num2;
					break;
				}
			}
		}
		
		return result;
	}
	
	static boolean isPrimeNum(int n) { //소수여부 반환
		boolean flag = true;
		if(n == 1) return false;
		
		for(int i = 2 ; i < n ; i++) {
			if(n % i == 0) {
				flag = false;
			}
		}
		
		return flag;
	}
}
